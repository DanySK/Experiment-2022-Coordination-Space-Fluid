module org:protelis:tutorial:leader

import protelis:coord:spreading
import protelis:lang:utils

def idOf(tuple) = tuple.get(0)
def distanceOf(tuple) = tuple.get(1).get(1)
def tieBreakerOf(tuple) = [tuple.get(1).get(0), tuple.get(0)]

/**
 * Devices compete against one another to become local leaders,
 * resulting  in  a  random  Voronoi  partition  with  a  characteristic
 * radius size.
 * This implementation leverages [processes](https://doi.org/10.1016/j.engappai.2020.104081),
 * each device tries to propagate a "bubble of influence", overlapping bubbles compete,
 * the highest symmetryBreaker value of the competing participants is selected.
 *
 * @param uid  T, unique node identifier
 * @param symmetryBreaker  V, competitivity, higher values make their node a more likely leader. Must be Comparable<V>.
 * @param radius  num, maximum radius of the partition
 * @param metric () -> num, neighbor distance estimator, returns a field of numbers
 * @param distance (bool) -> num, finds the distance with the closest location where the provided input is true
 * @return  T, the id of the local leader
 */
public def localLeaderElection(uid, symmetryBreaker, radius, metric, distance) {
	let default = [uid, [symmetryBreaker, 0]]
	//env.put("default", default)
	//env.putField("metric", metric())
	share (lead, nbrLead <- default) {
		let sources = [nbrLead]
		env.putField("debug", sources)
		let distances = alignedMap(
			sources,
			{ candidate, breakDist ->
				candidate == uid || foldMin(POSITIVE_INFINITY, breakDist.get(1) + metric()) < radius
			},
			{ candidate, breakDist ->
				let source = uid == candidate && idOf(lead) == uid
				let gradient = distance(source)
				// env.put("distance-to-" + candidate, gradient)
				[gradcast(source, symmetryBreaker, gradient, identity), gradient]
			},
			[NEGATIVE_INFINITY, POSITIVE_INFINITY]
		)
		//env.put("distances", distances)
		let closeEnough = distances.filter { distanceOf(it) < radius }
		//env.put("closeEnough", closeEnough)
		let best = closeEnough.fold(default) { a, b ->
			if (tieBreakerOf(a) > tieBreakerOf(b)) { a } else { b }
		}
		best
	}.get(0)
}

public def localLeaderElectionWithGradient(symmetryBreaker, radius, metric) =
	localLeaderElection(self.getDeviceUID().getId(), symmetryBreaker, radius, metric) { distanceToWithMetric(it, metric) }

let mid = self.getDeviceUID().getId()
let myNeighbors = foldSum(nbr(1))
let range = nbrRange()
let layerValue = env.get("layer", 0)
let layerField = nbr(layerValue)
let layerDiff = min(mux(mid == nbr(mid)) { 0 } else { 0.01 }, abs(layerValue - layerField))
localLeaderElectionWithGradient(
    myNeighbors,
	env.get("grain")
) {
    // let mid = self.getDeviceUID().getId()
    // mux(mid == nbr(mid)) { 0 } else { nbr(myNeighbors) * myNeighbors }
	// nbrRange()
	/*
	let diff = nbr(self.getCoordinates()) - self.getCoordinates()
	hypot(diff.get(0), diff.get(1))
	*/
    mux (env.has("layer")) { range * layerDiff } else { mux(mid == nbr(mid)) { 0 } else { 0.01 * nbr(myNeighbors) * myNeighbors } }
}
